name: MinGW Build & Release (qemu-simulide)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: v0.1.0)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-release:
    runs-on: windows-latest

    env:
      ZIP_NAME: qemu-simulide-windows-mingw64-${{ inputs.version }}.zip

    steps:
      - name: Habilitar long paths no Git
        run: |
          git config --system core.longpaths true
          git config --global core.longpaths true

      - name: Checkout (sem submódulos)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0
          persist-credentials: true

      - name: Setup MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-pixman
            mingw-w64-x86_64-libgcrypt
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-libslirp
            mingw-w64-x86_64-SDL2
            mingw-w64-x86_64-capstone
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ntldd
            mingw-w64-x86_64-bzip2

      - name: Versões das ferramentas
        shell: msys2 {0}
        run: |
          which gcc && gcc --version
          which python3 && python3 --version
          which meson && meson --version
          which ninja && ninja --version
          which ntldd && ntldd --version
          pkg-config --version || true

      - name: Limpar variáveis que alteram o configure
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          for v in QEMU_CONFIGURE_OPTS QEMU_CONFIGURE_FLAGS CONFIGURE_OPTS CONFIGURE_FLAGS; do
            unset "$v" || true
          done
          rm -rf build config.log meson-private meson-info || true

      # SLIRP: detecta e injeta flags (ou desabilita sem quebrar o build)
      - name: Detectar libslirp (enable/disable + flags)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          SLIRP_PKG=""
          if pkg-config --exists libslirp; then SLIRP_PKG="libslirp"; fi
          if [ -z "$SLIRP_PKG" ] && pkg-config --exists slirp; then SLIRP_PKG="slirp"; fi
          if [ -n "$SLIRP_PKG" ]; then
            echo "SLIRP_FLAG=--enable-slirp" >> "$GITHUB_ENV"
            CF="$(pkg-config --cflags "$SLIRP_PKG" || true)"
            LF="$(pkg-config --libs "$SLIRP_PKG" || true)"
            echo "CPPFLAGS=${CF}" >> "$GITHUB_ENV"
            echo "LDFLAGS=${LF}" >> "$GITHUB_ENV"
            echo "libslirp detectado ($SLIRP_PKG)."
          else
            echo "SLIRP_FLAG=--disable-slirp" >> "$GITHUB_ENV"
            echo "CPPFLAGS=" >> "$GITHUB_ENV"
            echo "LDFLAGS=" >> "$GITHUB_ENV"
            echo "libslirp NÃO detectado; slirp será desabilitado."
          fi

      # ===== Arena: procurar de verdade (map OR fail; sem neutralização) =====
      - name: Mapear arena (descobrir includes e campos a partir dos usos)
        id: map_arena
        shell: msys2 {0}
        run: |
          set -euo pipefail

          # 0) Existem usos de m_arena->...?
          if ! grep -RIl --include='*.c' -E 'm_arena->[A-Za-z_][A-Za-z0-9_]*' hw system >/dev/null 2>&1; then
            echo "arena_used=false" >> "$GITHUB_OUTPUT"
            echo "Nenhum uso de m_arena->... encontrado; nada a mapear."
            exit 0
          fi
          echo "arena_used=true" >> "$GITHUB_OUTPUT"

          # 1) Coletar campos usados no código (por frequência)
          grep -RIn --include='*.c' -E 'm_arena->([A-Za-z_][A-Za-z0-9_]*)' hw system \
            | sed -E 's/.*m_arena->([A-Za-z_][A-Za-z0-9_]*).*/\1/' \
            | sort | uniq -c | sort -nr > /tmp/_arena_field_freq.txt || true

          if [ ! -s /tmp/_arena_field_freq.txt ]; then
            echo "::error::Há usos de m_arena, mas não consegui extrair campos."
            exit 41
          fi
          echo "Campos por frequência:"
          head -n 50 /tmp/_arena_field_freq.txt || true

          # 2) Candidatos por heurística (action-likes e time-likes)
          awk '{print $2}' /tmp/_arena_field_freq.txt > /tmp/_arena_fields_all.txt
          grep -E '^(action|act|cmd|op|event|state)$' /tmp/_arena_fields_all.txt || true > /tmp/_arena_action_like.txt
          grep -E '^(time|ts|tstamp|timestamp|time_ns|ticks)$' /tmp/_arena_fields_all.txt || true > /tmp/_arena_time_like.txt
          # Se vazio, use os top-N gerais como fallback
          if [ ! -s /tmp/_arena_action_like.txt ]; then head -n 8 /tmp/_arena_fields_all.txt > /tmp/_arena_action_like.txt; fi
          if [ ! -s /tmp/_arena_time_like.txt ]; then head -n 8 /tmp/_arena_fields_all.txt > /tmp/_arena_time_like.txt; fi

          # 3) Encontrar headers relevantes para declarar m_arena e a struct
          #   - headers que mencionam m_arena
          grep -RIl --include='*.h' -E '\bm_arena\b' . > /tmp/_arena_headers1.txt || true
          #   - headers com struct qemuArena / typedef qemuArena_t
          grep -RIl --include='*.h' -E 'struct[[:space:]]+qemuArena|typedef[[:space:]]+struct[[:space:]]+qemuArena|qemuArena_t' . > /tmp/_arena_headers2.txt || true
          #   - alguns headers centrais (se existirem)
          for h in system/simuliface.h include/simuliface.h include/qemu/osdep.h; do
            [ -f "$h" ] && echo "$h" >> /tmp/_arena_headers2.txt || true
          done
          cat /tmp/_arena_headers1.txt /tmp/_arena_headers2.txt 2>/dev/null | awk 'NF' | sort -u > /tmp/_arena_headers.txt

          if [ ! -s /tmp/_arena_headers.txt ]; then
            echo "::error::Não achei nenhum header que declare m_arena/struct qemuArena."
            exit 42
          fi

          echo "Headers candidatos a incluir no probe:"
          cat /tmp/_arena_headers.txt | sed 's/^/  - /'

          # 4) Função para testar um par (A=action-like, T=time-like)
          test_pair () {
            A="$1"; T="$2"
            PROBE=/tmp/_probe.c
            OBJ=/tmp/_probe.o
            rm -f "${PROBE}" "${OBJ}"

            {
              printf '#include <stdint.h>\n'
              # incluir todos os headers candidatos
              while IFS= read -r h; do
                printf '#include "%s"\n' "$h"
              done < /tmp/_arena_headers.txt
              # Garantir o alias se só existir 'struct qemuArena'
              printf '#ifndef qemuArena_t\n'
              printf 'typedef struct qemuArena qemuArena_t;\n'
              printf '#endif\n'
              # Se não houver declaração visível de m_arena, declarar extern (não conflita)
              printf 'extern volatile qemuArena_t *m_arena;\n'
              # tocar nos campos
              printf 'int main(void){ (void)m_arena->%s; (void)m_arena->%s; return 0; }\n' "$A" "$T"
            } > "${PROBE}"

            gcc -m64 -c "${PROBE}" -o "${OBJ}" >/dev/null 2>&1
          }

          FOUND_A=""; FOUND_T=""
          while IFS= read -r A; do
            [ -z "$A" ] && continue
            while IFS= read -r T; do
              [ -z "$T" ] && continue
              [ "$A" = "$T" ] && continue
              if test_pair "$A" "$T"; then
                FOUND_A="$A"; FOUND_T="$T"; break 2
              fi
            done < /tmp/_arena_time_like.txt
          done < /tmp/_arena_action_like.txt

          if [ -z "${FOUND_A}" ] || [ -z "${FOUND_T}" ]; then
            echo "::group::Diagnóstico arena"
            echo "Headers testados:"
            cat /tmp/_arena_headers.txt | sed 's/^/  - /'
            echo "Top campos action-like:"
            cat /tmp/_arena_action_like.txt | sed 's/^/  - /'
            echo "Top campos time-like:"
            cat /tmp/_arena_time_like.txt | sed 's/^/  - /'
            echo "::endgroup::"
            echo "::error::Falha ao mapear automaticamente os campos de arena (action/time)."
            echo "::error::Ajuste os headers ou os nomes dos campos; o build não será neutralizado."
            exit 43
          fi

          echo "Mapeado: action -> ${FOUND_A} | time -> ${FOUND_T}"
          echo "CFLAGS=${CFLAGS:+$CFLAGS }-Daction=${FOUND_A} -Dtime=${FOUND_T}" >> "$GITHUB_ENV"
          echo "arena_mapped=true" >> "$GITHUB_OUTPUT"

      # UART shim — appendar no fim de system/simuliface.c
      - name: Shim STM32 UART (append no fim de system/simuliface.c)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          FILE="system/simuliface.c"
          if [ -f "${FILE}" ] && grep -q 'stm32_f103c8_uart_action' "${FILE}"; then
            # Se já houver implementação real, nada a fazer
            if grep -Eq '^[[:space:]]*void[[:space:]]+stm32_f103c8_uart_action[[:space:]]*\(' "${FILE}"; then
              echo "Implementação real já existe; nada a fazer."
              exit 0
            fi
            # Se nosso marcador não existir, append no FIM
            if ! grep -q 'WEAK_STM32_UART_SHIM' "${FILE}"; then
              echo "Anexando weak stub ao final de ${FILE}"
              {
                printf "\n#ifndef WEAK_STM32_UART_SHIM\n#define WEAK_STM32_UART_SHIM 1\n"
                printf "void stm32_f103c8_uart_action(void) __attribute__((weak));\n"
                printf "void stm32_f103c8_uart_action(void){}\n"
                printf "#endif /* WEAK_STM32_UART_SHIM */\n"
              } >> "${FILE}"
            else
              echo "Shim já presente; seguindo."
            fi
          else
            echo "system/simuliface.c não referencia stm32_f103c8_uart_action; nada a fazer."
          fi

      # Configure (SDL/Capstone ON; SLIRP auto; desativa Werror)
      - name: Configure (conforme README)
        shell: msys2 {0}
        env:
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig:/usr/lib/pkgconfig
          CFLAGS: ${{ env.CFLAGS }}
          CPPFLAGS: ${{ env.CPPFLAGS }}
          LDFLAGS: ${{ env.LDFLAGS }}
          SLIRP_FLAG: ${{ env.SLIRP_FLAG }}
        run: |
          set -euxo pipefail
          test -f ./configure
          ./configure --target-list=xtensa-softmmu --extra-cflags=-fPIC \
            ${SLIRP_FLAG} \
            --enable-sdl \
            --enable-capstone \
            --disable-attr --disable-auth-pam --disable-avx2 --disable-avx512bw \
            --disable-blkio --disable-bochs --disable-bpf --disable-brlapi \
            --disable-bzip2 --disable-canokey --disable-cap-ng \
            --disable-cloop --disable-cocoa --disable-colo-proxy --disable-coreaudio \
            --disable-crypto-afalg --disable-curl --disable-curses --disable-dbus-display \
            --disable-dmg --disable-docs --disable-dsound --disable-fuse --disable-fuse-lseek \
            --disable-gcrypt --disable-gettext --disable-gio --disable-glusterfs \
            --disable-gnutls --disable-gtk --disable-gtk-clipboard --disable-guest-agent \
            --disable-guest-agent-msi --disable-hvf --disable-iconv --disable-jack \
            --disable-keyring --disable-kvm --disable-l2tpv3 --disable-libdaxctl \
            --disable-libdw --disable-libiscsi --disable-libkeyutils --disable-libnfs \
            --disable-libpmem --disable-libssh --disable-libudev --disable-libusb \
            --disable-libvduse --disable-linux-aio --disable-linux-io-uring --disable-lzfse \
            --disable-lzo --disable-malloc-trim --disable-membarrier --disable-modules \
            --disable-mpath --disable-multiprocess --disable-netmap --disable-nettle \
            --disable-numa --disable-nvmm --disable-opengl --disable-oss --disable-pa \
            --disable-parallels --disable-pipewire --disable-png --disable-qcow1 \
            --disable-qed --disable-qga-vss --disable-rbd --disable-rdma --disable-replication \
            --disable-sdl-image --disable-seccomp --disable-selinux \
            --disable-smartcard --disable-snappy --disable-sndio --disable-sparse \
            --disable-spice --disable-spice-protocol --disable-stack-protector \
            --disable-tools --disable-tpm --disable-u2f --disable-usb-redir \
            --disable-vde --disable-vdi --disable-vhdx --disable-vhost-crypto \
            --disable-vhost-kernel --disable-vhost-net --disable-vhost-user --disable-vhost-vdpa \
            --disable-virglrenderer --disable-virtfs --disable-vmdk --disable-vmnet \
            --disable-vnc --disable-vnc-jpeg --disable-vnc-sasl --disable-vpc \
            --disable-vte --disable-vvfat --disable-whpx --disable-xen --disable-xkbcommon \
            --disable-zstd \
            --enable-tcg --enable-system \
            --disable-werror

      - name: Build (ninja com captura de stdout/stderr)
        shell: msys2 {0}
        env:
          CFLAGS: ${{ env.CFLAGS }}
          CPPFLAGS: ${{ env.CPPFLAGS }}
          LDFLAGS: ${{ env.LDFLAGS }}
          NINJA_STATUS: "[%f/%t %o/sec] "
          TERM: dumb
        run: |
          set -Eeuo pipefail
          mkdir -p build/_ci_logs
          (
            set +e
            ninja -C build -v \
              1> >(tee build/_ci_logs/_ci_stdout.log) \
              2> >(tee build/_ci_logs/_ci_stderr.log >&2)
            echo $? > build/_ci_logs/_ci_rc.txt
          )
          RC="$(cat build/_ci_logs/_ci_rc.txt || echo 1)"
          if [ "$RC" -ne 0 ]; then
            echo "Build falhou com RC=$RC"
            exit "$RC"
          fi

      - name: Preparar bundle (EXEs + DLLs)
        if: ${{ success() }}
        shell: msys2 {0}
        run: |
          set -euo pipefail
          EXE_PATH="$( (find build -type f -name 'qemu-system-xtensa*.exe' -print -quit 2>/dev/null) || true )"
          if [ -z "${EXE_PATH}" ]; then
            echo "qemu-system-xtensa*.exe não encontrado em build/"
            (find build -maxdepth 3 -type f 2>/dev/null | sed 's/^/  - /' || true)
            exit 1
          fi
          BIN_DIR="$(dirname "${EXE_PATH}")"
          echo "BIN_DIR: ${BIN_DIR}"
          rm -rf bundle
          mkdir -p bundle
          cp -v "${BIN_DIR}"/qemu*.exe bundle/ || true

          if [ -d "pc-bios" ]; then
            mkdir -p bundle/pc-bios
            cp -r pc-bios/* bundle/pc-bios/ || true
          fi

          TMP_DEPS="$(mktemp)"; : > "${TMP_DEPS}"
          shopt -s nullglob
          for exe in bundle/*.exe; do
            ntldd -R "$exe" 2>/dev/null | awk '/=>/ && /\.dll/ {gsub("\\\\","/"); print $3}' >> "${TMP_DEPS}" || true
          done
          if [ -s "${TMP_DEPS}" ]; then
            sort -u "${TMP_DEPS}" | while IFS= read -r dll; do
              [ -f "$dll" ] && cp -n "$dll" bundle/ || true
            done
          fi
          rm -f "${TMP_DEPS}"

          for dll in \
            libwinpthread-1.dll libstdc++-6.dll libgcc_s_seh-1.dll \
            libglib-2.0-0.dll libgobject-2.0-0.dll libgmodule-2.0-0.dll libgthread-2.0-0.dll \
            libintl-8.dll libiconv-2.dll libpcre2-8-0.dll libpixman-1-0.dll \
            libgcrypt-20.dll zlib1.dll \
            SDL2.dll \
            libcapstone.dll \
          ; do
            [ -f "/mingw64/bin/$dll" ] && cp -n "/mingw64/bin/$dll" bundle/ || true
          done

          ls -al bundle || true

      - name: Gerar ZIP
        if: ${{ success() }}
        shell: pwsh
        run: |
          if (Test-Path "${{ env.ZIP_NAME }}") { Remove-Item "${{ env.ZIP_NAME }}" }
          Compress-Archive -Path bundle\* -DestinationPath "${{ env.ZIP_NAME }}"

      - name: Upload artifact (CI)
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
          if-no-files-found: error

      - name: Criar e enviar tag (idempotente)
        if: ${{ success() }}
        shell: bash
        env:
          TAG_NAME: ${{ inputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          git config --global --add safe.directory "$PWD"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git fetch --tags --force --prune
          if git rev-parse -q --verify "refs/tags/${TAG_NAME}" >/dev/null; then
            echo "Tag ${TAG_NAME} já existe localmente."
          else
            git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}"
          fi
          if git ls-remote --exit-code --tags origin "refs/tags/${TAG_NAME}" >/dev/null 2>&1; then
            echo "Tag ${TAG_NAME} já existe no remoto; seguindo."
          else
            git push origin "refs/tags/${TAG_NAME}"
          fi

      - name: Criar Release com tag
        if: ${{ success() }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: qemu-simulide ${{ inputs.version }}
          body: ${{ inputs.notes }}
          prerelease: ${{ inputs.prerelease }}
          target_commitish: ${{ github.sha }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Mostrar logs em caso de falha (ninja/meson)
        if: ${{ failure() }}
        shell: msys2 {0}
        run: |
          set -euo pipefail
          echo "===== ÚLTIMAS 300 linhas de _ci_stderr.log ====="
          { test -f build/_ci_logs/_ci_stderr.log && tail -n 300 build/_ci_logs/_ci_stderr.log || echo "sem _ci_stderr.log"; }
          echo
          echo "===== ÚLTIMAS 200 linhas de _ci_stdout.log ====="
          { test -f build/_ci_logs/_ci_stdout.log && tail -n 200 build/_ci_logs/_ci_stdout.log || echo "sem _ci_stdout.log"; }
          echo
          echo "===== grep 'error:' no stderr (últimas 120) ====="
          { test -f build/_ci_logs/_ci_stderr.log && grep -inE "error:|fatal error:" build/_ci_logs/_ci_stderr.log | tail -n 120 || true; }
          echo
          echo "===== grep 'FAILED:' no meson-log (últimas 40) ====="
          { test -f build/meson-logs/meson-log.txt && grep -n "FAILED:" build/meson-logs/meson-log.txt | tail -n 40 || echo "sem meson-log.txt"; }
          echo
          echo "===== TAIL do meson-log.txt (400 linhas) ====="
          { test -f build/meson-logs/meson-log.txt && tail -n 400 build/meson-logs/meson-log.txt || true; }

      - name: Upload logs (sempre)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_id }}
          path: |
            build/_ci_logs/_ci_stdout.log
            build/_ci_logs/_ci_stderr.log
            build/_ci_logs/_ci_rc.txt
            build/meson-logs/meson-log.txt
            config.log
          if-no-files-found: warn
