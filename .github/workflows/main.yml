name: MinGW Build & Release (qemu-simulide)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: v0.1.0)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-release:
    runs-on: windows-latest

    env:
      ZIP_NAME: qemu-simulide-windows-mingw64-${{ inputs.version }}.zip

    steps:
      - name: Habilitar long paths no Git
        run: |
          git config --system core.longpaths true
          git config --global core.longpaths true

      - name: Checkout (sem submódulos)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0
          # Mantém credenciais para push da tag
          persist-credentials: true

      - name: Setup MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-pixman
            mingw-w64-x86_64-libgcrypt
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-libslirp
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ntldd
            mingw-w64-x86_64-bzip2

      - name: Versões das ferramentas
        shell: msys2 {0}
        run: |
          which gcc && gcc --version
          which python3 && python3 --version
          which meson && meson --version
          which ninja && ninja --version
          which ntldd && ntldd --version
          pkg-config --version || true

      - name: Limpar variáveis que alteram o configure
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          for v in QEMU_CONFIGURE_OPTS QEMU_CONFIGURE_FLAGS CONFIGURE_OPTS CONFIGURE_FLAGS; do
            unset "$v" || true
          done
          rm -rf build config.log meson-private meson-info || true

      # Detecta libslirp e prepara flags (garante include/lib mesmo que configure não propague)
      - name: Detectar libslirp (enable/disable + flags de compilação)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          SLIRP_PKG=""
          if pkg-config --exists libslirp; then SLIRP_PKG="libslirp"; fi
          if [ -z "$SLIRP_PKG" ] && pkg-config --exists slirp; then SLIRP_PKG="slirp"; fi

          if [ -n "$SLIRP_PKG" ]; then
            echo "SLIRP_FLAG=--enable-slirp" >> "$GITHUB_ENV"
            # Exporta CFLAGS/LDFLAGS extras para garantir que <slirp/libslirp.h> seja encontrado
            CF="$(pkg-config --cflags "$SLIRP_PKG" || true)"
            LF="$(pkg-config --libs "$SLIRP_PKG" || true)"
            echo "CPPFLAGS=${CF}" >> "$GITHUB_ENV"
            echo "LDFLAGS=${LF}" >> "$GITHUB_ENV"
            echo "libslirp detectado via pkg-config ($SLIRP_PKG)."
          else
            echo "SLIRP_FLAG=--disable-slirp" >> "$GITHUB_ENV"
            echo "CPPFLAGS=" >> "$GITHUB_ENV"
            echo "LDFLAGS=" >> "$GITHUB_ENV"
            echo "libslirp NÃO detectado; slirp será desabilitado para não quebrar o build."
          fi

      # 1) Detecta campos de qemuArena_t e exporta CFLAGS (-Daction=.. -Dtime=..)
      - name: Detectar campos do qemuArena_t e setar CFLAGS
        id: detect_arena
        shell: msys2 {0}
        continue-on-error: true
        run: |
          set -euo pipefail
          ARENA_HDR="$(grep -RIl --include='*.h' 'typedef struct qemuArena' || true)"
          if [ -z "${ARENA_HDR}" ]; then
            ARENA_HDR="$(grep -RIl --include='*.h' 'qemuArena_t' || true)"
          fi
          if [ -z "${ARENA_HDR}" ]; then
            echo "Falha: não achei header com qemuArena_t."
            exit 2
          fi
          echo "Header do qemuArena_t: ${ARENA_HDR}"
          awk '
            /typedef[[:space:]]+struct[[:space:]]+qemuArena/ {inblk=1; next}
            inblk && /};/ {inblk=0}
            inblk {
              line=$0
              sub(/\/\/.*/,"",line)
              gsub(/\/\*([^*]|\*+[^*\/])*\*\//,"",line)
              if (line ~ /^[[:space:]]*$/) next
              if (line ~ /^[[:space:]]*{/ ) next
              if (line ~ /;/) {
                sub(/.*[[:space:]\*]([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*;.*/,"\\1",line)
                if (line ~ /^[A-Za-z_][A-Za-z0-9_]*$/) print line
              }
            }
          ' "${ARENA_HDR}" | sort -u > /tmp/_arena_fields.txt || true
          if [ ! -s /tmp/_arena_fields.txt ]; then
            printf '%s\n' op cmd event state action ts timestamp time_ns ticks tstamp time > /tmp/_arena_fields.txt
          fi
          mapfile -t FIELDS < /tmp/_arena_fields.txt
          echo "Campos candidatos: ${FIELDS[*]}"

          test_pair () {
            A="$1"; T="$2"
            rm -f /tmp/_probe.c /tmp/_probe.o
            printf '#include <stdint.h>\n' > /tmp/_probe.c
            printf '#include "%s"\n' "${ARENA_HDR}" >> /tmp/_probe.c
            printf 'int main(void){ volatile qemuArena_t *p=(volatile qemuArena_t*)0; (void)p->%s; (void)p->%s; return 0; }\n' "${A}" "${T}" >> /tmp/_probe.c
            gcc -m64 -c /tmp/_probe.c -o /tmp/_probe.o >/dev/null 2>&1
          }

          FOUND_A=""; FOUND_T=""
          for A in "${FIELDS[@]}"; do
            for T in "${FIELDS[@]}"; do
              [ "${A}" = "${T}" ] && continue
              if test_pair "${A}" "${T}"; then
                FOUND_A="${A}"; FOUND_T="${T}"; break 2
              fi
            done
          done

          if [ -n "${FOUND_A}" ] && [ -n "${FOUND_T}" ]; then
            echo "Mapeado: action -> ${FOUND_A} | time -> ${FOUND_T}"
            # Anexa aos CPPFLAGS/CFLAGS existentes (se houver)
            echo "CFLAGS=${CFLAGS:+$CFLAGS }-Daction=${FOUND_A} -Dtime=${FOUND_T}" >> "$GITHUB_ENV"
          else
            echo "Não foi possível mapear automaticamente."
            exit 3
          fi

      # 2) Fallback: neutraliza arena se detecção falhar
      - name: Fallback - neutralizar arena em todos os fontes
        if: steps.detect_arena.outcome == 'failure'
        shell: msys2 {0}
        run: |
          set -euo pipefail
          mapfile -t ARENA_FILES < <(grep -REIl --include='*.c' 'm_arena->(action|time)' hw system || true)
          if [ "${#ARENA_FILES[@]}" -eq 0 ]; then
            echo "Nenhum arquivo com m_arena->action/time encontrado. Nada a fazer."
            exit 0
          fi
          printf 'Patchando:\n - %s\n' "${ARENA_FILES[@]}"
          for FILE in "${ARENA_FILES[@]}"; do
            sed -i -E 's/while[[:space:]]*\([[:space:]]*m_arena->action[[:space:]]*\)/while(0) \/* shim: no wait *\//g' "${FILE}"
