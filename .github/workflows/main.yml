name: MinGW Build & Release (qemu-simulide)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: v0.1.0)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-release:
    runs-on: windows-latest

    env:
      ZIP_NAME: qemu-simulide-windows-mingw64-${{ inputs.version }}.zip

    steps:
      - name: Habilitar long paths no Git
        run: |
          git config --system core.longpaths true
          git config --global core.longpaths true

      - name: Checkout (sem submódulos)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      - name: Setup MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-pixman
            mingw-w64-x86_64-libgcrypt
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ntldd
            mingw-w64-x86_64-bzip2

      - name: Versões das ferramentas
        shell: msys2 {0}
        run: |
          which gcc && gcc --version
          which python3 && python3 --version
          which meson && meson --version
          which ninja && ninja --version
          which ntldd && ntldd --version
          pkg-config --version || true

      # Higienização do ambiente para não herdar flags estranhas
      - name: Limpar variáveis que alteram o configure
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          for v in QEMU_CONFIGURE_OPTS QEMU_CONFIGURE_FLAGS CONFIGURE_OPTS CONFIGURE_FLAGS; do
            unset "$v" || true
          done
          rm -rf build config.log meson-private meson-info || true

      # Configure exatamente como no README
      - name: Configure (conforme README)
        shell: msys2 {0}
        env:
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig:/usr/lib/pkgconfig
        run: |
          set -euxo pipefail
          test -f ./configure
          ./configure --target-list=xtensa-softmmu --extra-cflags=-fPIC \
            --disable-attr --disable-auth-pam --disable-avx2 --disable-avx512bw \
            --disable-blkio --disable-bochs --disable-bpf --disable-brlapi \
            --disable-bzip2 --disable-canokey --disable-cap-ng --disable-capstone \
            --disable-cloop --disable-cocoa --disable-colo-proxy --disable-coreaudio \
            --disable-crypto-afalg --disable-curl --disable-curses --disable-dbus-display \
            --disable-dmg --disable-docs --disable-dsound --disable-fuse --disable-fuse-lseek \
            --disable-gcrypt --disable-gettext --disable-gio --disable-glusterfs \
            --disable-gnutls --disable-gtk --disable-gtk-clipboard --disable-guest-agent \
            --disable-guest-agent-msi --disable-hvf --disable-iconv --disable-jack \
            --disable-keyring --disable-kvm --disable-l2tpv3 --disable-libdaxctl \
            --disable-libdw --disable-libiscsi --disable-libkeyutils --disable-libnfs \
            --disable-libpmem --disable-libssh --disable-libudev --disable-libusb \
            --disable-libvduse --disable-linux-aio --disable-linux-io-uring --disable-lzfse \
            --disable-lzo --disable-malloc-trim --disable-membarrier --disable-modules \
            --disable-mpath --disable-multiprocess --disable-netmap --disable-nettle \
            --disable-numa --disable-nvmm --disable-opengl --disable-oss --disable-pa \
            --disable-parallels --disable-pipewire --disable-png --disable-qcow1 \
            --disable-qed --disable-qga-vss --disable-rbd --disable-rdma --disable-replication \
            --disable-sdl --disable-sdl-image --disable-seccomp --disable-selinux \
            --disable-smartcard --disable-snappy --disable-sndio --disable-sparse \
            --disable-spice --disable-spice-protocol --disable-stack-protector \
            --disable-tcg --disable-tools --disable-tpm --disable-u2f --disable-usb-redir \
            --disable-vde --disable-vdi --disable-vhdx --disable-vhost-crypto \
            --disable-vhost-kernel --disable-vhost-net --disable-vhost-user --disable-vhost-vdpa \
            --disable-virglrenderer --disable-virtfs --disable-vmdk --disable-vmnet \
            --disable-vnc --disable-vnc-jpeg --disable-vnc-sasl --disable-vpc \
            --disable-vte --disable-vvfat --disable-whpx --disable-xen --disable-xkbcommon \
            --disable-zstd --disable-system --disable-user --disable-linux-user --disable-bsd-user \
            --disable-pie --disable-debug-tcg --disable-werror --disable-alsa --disable-debug-info \
            --enable-tcg --enable-system --enable-gcrypt

      - name: Build (ninja)
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          ninja -C build

      - name: Preparar bundle (EXEs + DLLs)
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          EXE_PATH="$(find build -type f -name 'qemu-system-xtensa*.exe' -print -quit || true)"
          if [ -z "${EXE_PATH}" ]; then
            echo "qemu-system-xtensa*.exe não encontrado em build/"
            find build -maxdepth 3 -type f | sed 's/^/  - /'
            exit 1
          fi
          BIN_DIR="$(dirname "${EXE_PATH}")"
          echo "BIN_DIR: ${BIN_DIR}"
          rm -rf bundle
          mkdir -p bundle
          cp -v "${BIN_DIR}"/qemu*.exe bundle/ || true

          # Copiar ROMs/pc-bios se necessário (opcionalmente vazio para este alvo)
          if [ -d "pc-bios" ]; then
            mkdir -p bundle/pc-bios
            cp -r pc-bios/* bundle/pc-bios/ || true
          fi

          # Resolver dependências com ntldd
          mapfile -t DEPS < <(
            find bundle -maxdepth 1 -type f -name '*.exe' -print0 |
            xargs -0 -I{} ntldd -R "{}" |
            sed -n 's/.*=> \([^ ]*\.dll\).*/\1/p' |
            sed 's#\\#/#g' | awk 'NF && $0 ~ /\.dll$/ {print}' | sort -u
          )
          for d in "${DEPS[@]}"; do
            if [ -f "$d" ]; then
              cp -n "$d" bundle/
            fi
          done

          # DLLs comuns do runtime MinGW (backup, se ntldd falhar em alguma)
          for dll in \
            libwinpthread-1.dll libstdc++-6.dll libgcc_s_seh-1.dll \
            libglib-2.0-0.dll libgobject-2.0-0.dll libgmodule-2.0-0.dll libgthread-2.0-0.dll \
            libintl-8.dll libiconv-2.dll libpcre2-8-0.dll libpixman-1-0.dll \
            libgcrypt-20.dll zlib1.dll \
          ; do
            [ -f "/mingw64/bin/$dll" ] && cp -n "/mingw64/bin/$dll" bundle/ || true
          done

          echo "Conteúdo final de bundle/:"
          ls -al bundle

      - name: Gerar ZIP
        shell: pwsh
        run: |
          if (Test-Path "${{ env.ZIP_NAME }}") { Remove-Item "${{ env.ZIP_NAME }}" }
          Compress-Archive -Path bundle\* -DestinationPath "${{ env.ZIP_NAME }}"

      - name: Upload artifact (CI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
          if-no-files-found: error

      - name: Criar Release com tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: qemu-simulide ${{ inputs.version }}
          body: ${{ inputs.notes }}
          prerelease: ${{ inputs.prerelease }}
          target_commitish: ${{ github.sha }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Mostrar logs em caso de falha (config.log / meson-log)
        if: ${{ failure() }}
        shell: msys2 {0}
        run: |
          { test -f config.log && echo "===== BEGIN config.log =====" && sed -n '1,200p' config.log && echo "===== END config.log ====="; } || true
          { test -f build/meson-logs/meson-log.txt && echo "===== BEGIN meson-log.txt =====" && sed -n '1,200p' build/meson-logs/meson-log.txt && echo "===== END meson-log.txt ====="; } || true
