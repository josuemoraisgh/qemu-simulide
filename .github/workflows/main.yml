name: MinGW Build & Release (qemu-simulide)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: v0.1.0)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-release:
    runs-on: windows-latest

    env:
      ZIP_NAME: qemu-simulide-windows-mingw64-${{ inputs.version }}.zip

    steps:
      - name: Habilitar long paths no Git
        run: |
          git config --system core.longpaths true
          git config --global core.longpaths true

      - name: Checkout (sem submódulos)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      - name: Setup MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-pixman
            mingw-w64-x86_64-libgcrypt
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ntldd
            mingw-w64-x86_64-bzip2

      - name: Versões das ferramentas
        shell: msys2 {0}
        run: |
          which gcc && gcc --version
          which python3 && python3 --version
          which meson && meson --version
          which ninja && ninja --version
          which ntldd && ntldd --version
          pkg-config --version || true

      - name: Limpar variáveis que alteram o configure
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          for v in QEMU_CONFIGURE_OPTS QEMU_CONFIGURE_FLAGS CONFIGURE_OPTS CONFIGURE_FLAGS; do
            unset "$v" || true
          done
          rm -rf build config.log meson-private meson-info || true

      # (1) Detecta campos de qemuArena_t e exporta CFLAGS (-Daction=.. -Dtime=..)
      - name: Detectar campos do qemuArena_t e setar CFLAGS
        id: detect_arena
        shell: msys2 {0}
        continue-on-error: true
        run: |
          set -euo pipefail
          ARENA_HDR="$(grep -RIl --include='*.h' 'typedef struct qemuArena' || true)"
          if [ -z "${ARENA_HDR}" ]; then
            ARENA_HDR="$(grep -RIl --include='*.h' 'qemuArena_t' || true)"
          fi
          if [ -z "${ARENA_HDR}" ]; then
            echo "Falha: não achei header com qemuArena_t."
            exit 2
          fi
          echo "Header do qemuArena_t: ${ARENA_HDR}"
          awk '
            /typedef[[:space:]]+struct[[:space:]]+qemuArena/ {inblk=1; next}
            inblk && /};/ {inblk=0}
            inblk {
              line=$0
              sub(/\/\/.*/,"",line)
              gsub(/\/\*([^*]|\*+[^*\/])*\*\//,"",line)
              if (line ~ /^[[:space:]]*$/) next
              if (line ~ /^[[:space:]]*{/ ) next
              if (line ~ /;/) {
                sub(/.*[[:space:]\*]([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*;.*/,"\\1",line)
                if (line ~ /^[A-Za-z_][A-Za-z0-9_]*$/) print line
              }
            }
          ' "${ARENA_HDR}" | sort -u > /tmp/_arena_fields.txt || true
          if [ ! -s /tmp/_arena_fields.txt ]; then
            printf '%s\n' op cmd event state action ts timestamp time_ns ticks tstamp time > /tmp/_arena_fields.txt
          fi
          mapfile -t FIELDS < /tmp/_arena_fields.txt
          echo "Campos candidatos: ${FIELDS[*]}"

          test_pair () {
            A="$1"; T="$2"
            rm -f /tmp/_probe.c /tmp/_probe.o
            printf '#include <stdint.h>\n' > /tmp/_probe.c
            printf '#include "%s"\n' "${ARENA_HDR}" >> /tmp/_probe.c
            printf 'int main(void){ volatile qemuArena_t *p=(volatile qemuArena_t*)0; (void)p->%s; (void)p->%s; return 0; }\n' "${A}" "${T}" >> /tmp/_probe.c
            gcc -m64 -c /tmp/_probe.c -o /tmp/_probe.o >/dev/null 2>&1
          }

          FOUND_A=""; FOUND_T=""
          for A in "${FIELDS[@]}"; do
            for T in "${FIELDS[@]}"; do
              [ "${A}" = "${T}" ] && continue
              if test_pair "${A}" "${T}"; then
                FOUND_A="${A}"; FOUND_T="${T}"; break 2
              fi
            done
          done

          if [ -n "${FOUND_A}" ] && [ -n "${FOUND_T}" ]; then
            echo "Mapeado: action -> ${FOUND_A} | time -> ${FOUND_T}"
            echo "CFLAGS=-Daction=${FOUND_A} -Dtime=${FOUND_T}" >> "$GITHUB_ENV"
          else
            echo "Não foi possível mapear automaticamente."
            exit 3
          fi

      # (2) Fallback: neutraliza usos de m_arena->action/time quando detecção falhar
      - name: Fallback - neutralizar arena em todos os fontes
        if: steps.detect_arena.outcome == 'failure'
        shell: msys2 {0}
        run: |
          set -euo pipefail
          mapfile -t ARENA_FILES < <(grep -REIl --include='*.c' 'm_arena->(action|time)' hw system || true)
          if [ "${#ARENA_FILES[@]}" -eq 0 ]; then
            echo "Nenhum arquivo com m_arena->action/time encontrado. Nada a fazer."
            exit 0
          fi
          printf 'Patchando:\n - %s\n' "${ARENA_FILES[@]}"
          for FILE in "${ARENA_FILES[@]}"; do
            sed -i -E 's/while[[:space:]]*\([[:space:]]*m_arena->action[[:space:]]*\)/while(0) \/* shim: no wait *\//' "${FILE}"
            sed -i -E 's/m_arena->action[[:space:]]*=[^;]*;/\/\* shim: drop arena action *\//g' "${FILE}"
            sed -i -E 's/m_arena->time[[:space:]]*=[[:space:]]*qemuTime[[:space:]]*;/\(void\)qemuTime; \/* shim *\//g' "${FILE}"
            sed -i -E 's/m_arena->time[[:space:]]*=[^;]*;/\/\* shim: drop arena time *\//g' "${FILE}"
          done

      # (3) Shim STM32 UART: adiciona stub fraco se o símbolo aparecer em system/simuliface.c
      - name: Shim STM32 UART (weak stub em system/simuliface.c)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          FILE="system/simuliface.c"
          if [ -f "${FILE}" ] && grep -q 'stm32_f103c8_uart_action' "${FILE}"; then
            if ! grep -q 'WEAK_STM32_UART_SHIM' "${FILE}"; then
              echo "Inserindo weak stub de stm32_f103c8_uart_action em ${FILE}"
              tmp="${FILE}.tmp"
              {
                printf "#ifndef WEAK_STM32_UART_SHIM\n#define WEAK_STM32_UART_SHIM 1\n"
                printf "__attribute__((weak)) void stm32_f103c8_uart_action(void){}\n"
                printf "#endif\n"
                cat "${FILE}"
              } > "${tmp}"
              mv "${tmp}" "${FILE}"
            else
              echo "Shim já presente; seguindo."
            fi
          else
            echo "system/simuliface.c não referencia stm32_f103c8_uart_action; nada a fazer."
          fi

      # Configure (igual README)
      - name: Configure (conforme README)
        shell: msys2 {0}
        env:
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig:/usr/lib/pkgconfig
          CFLAGS: ${{ env.CFLAGS }}
        run: |
          set -euxo pipefail
          test -f ./configure
          ./configure --target-list=xtensa-softmmu --extra-cflags=-fPIC \
            --disable-attr --disable-auth-pam --disable-avx2 --disable-avx512bw \
            --disable-blkio --disable-bochs --disable-bpf --disable-brlapi \
            --disable-bzip2 --disable-canokey --disable-cap-ng --disable-capstone \
            --disable-cloop --disable-cocoa --disable-colo-proxy --disable-coreaudio \
            --disable-crypto-afalg --disable-curl --disable-curses --disable-dbus-display \
            --disable-dmg --disable-docs --disable-dsound --disable-fuse --disable-fuse-lseek \
            --disable-gcrypt --disable-gettext --disable-gio --disable-glusterfs \
            --disable-gnutls --disable-gtk --disable-gtk-clipboard --disable-guest-agent \
            --disable-guest-agent-msi --disable-hvf --disable-iconv --disable-jack \
            --disable-keyring --disable-kvm --disable-l2tpv3 --disable-libdaxctl \
            --disable-libdw --disable-libiscsi --disable-libkeyutils --disable-libnfs \
            --disable-libpmem --disable-libssh --disable-libudev --disable-libusb \
            --disable-libvduse --disable-linux-aio --disable-linux-io-uring --disable-lzfse \
            --disable-lzo --disable-malloc-trim --disable-membarrier --disable-modules \
            --disable-mpath --disable-multiprocess --disable-netmap --disable-nettle \
            --disable-numa --disable-nvmm --disable-opengl --disable-oss --disable-pa \
            --disable-parallels --disable-pipewire --disable-png --disable-qcow1 \
            --disable-qed --disable-qga-vss --disable-rbd --disable-rdma --disable-replication \
            --disable-sdl --disable-sdl-image --disable-seccomp --disable-selinux \
            --disable-smartcard --disable-snappy --disable-sndio --disable-sparse \
            --disable-spice --disable-spice-protocol --disable-stack-protector \
            --disable-tcg --disable-tools --disable-tpm --disable-u2f --disable-usb-redir \
            --disable-vde --disable-vdi --disable-vhdx --disable-vhost-crypto \
            --disable-vhost-kernel --disable-vhost-net --disable-vhost-user --disable-vhost-vdpa \
            --disable-virglrenderer --disable-virtfs --disable-vmdk --disable-vmnet \
            --disable-vnc --disable-vnc-jpeg --disable-vnc-sasl --disable-vpc \
            --disable-vte --disable-vvfat --disable-whpx --disable-xen --disable-xkbcommon \
            --disable-zstd --disable-system --disable-user --disable-linux-user --disable-bsd-user \
            --disable-pie --disable-debug-tcg --disable-werror --disable-alsa --disable-debug-info \
            --enable-tcg --enable-system --enable-gcrypt

      # ======== BUILD COM LOGS APRIMORADOS ========
      - name: Build (ninja com captura de stdout/stderr)
        shell: msys2 {0}
        env:
          CFLAGS: ${{ env.CFLAGS }}
          NINJA_STATUS: "[%f/%t %o/sec] "
          TERM: dumb
        run: |
          set -Eeuo pipefail
          mkdir -p build/_ci_logs
          (
            set +e
            ninja -C build -v \
              1> >(tee build/_ci_logs/_ci_stdout.log) \
              2> >(tee build/_ci_logs/_ci_stderr.log >&2)
            echo $? > build/_ci_logs/_ci_rc.txt
          )
          RC="$(cat build/_ci_logs/_ci_rc.txt || echo 1)"
          if [ "$RC" -ne 0 ]; then
            echo "Build falhou com RC=$RC"
            exit "$RC"
          fi

      - name: Preparar bundle (EXEs + DLLs) — robusto (sem pipelines frágeis)
        if: ${{ success() }}
        shell: msys2 {0}
        run: |
          set -euo pipefail
          # Localiza o executável
          EXE_PATH="$( (find build -type f -name 'qemu-system-xtensa*.exe' -print -quit 2>/dev/null) || true )"
          if [ -z "${EXE_PATH}" ]; then
            echo "qemu-system-xtensa*.exe não encontrado em build/"
            (find build -maxdepth 3 -type f 2>/dev/null | sed 's/^/  - /' || true)
            exit 1
          fi
          BIN_DIR="$(dirname "${EXE_PATH}")"
          echo "BIN_DIR: ${BIN_DIR}"

          # Prepara bundle
          rm -rf bundle
          mkdir -p bundle
          cp -v "${BIN_DIR}"/qemu*.exe bundle/ || true

          # Assets opcionais
          if [ -d "pc-bios" ]; then
            mkdir -p bundle/pc-bios
            cp -r pc-bios/* bundle/pc-bios/ || true
          fi

          # Coleta dependências DLL de forma segura (sem pipeline com pipefail)
          TMP_DEPS="$(mktemp)"
          : > "${TMP_DEPS}"
          shopt -s nullglob
          for exe in bundle/*.exe; do
            # ntldd lista dependências; ignorar erros individuais para não abortar
            ntldd -R "$exe" 2>/dev/null | awk '/=>/ && /\.dll/ {gsub("\\\\","/"); print $3}' >> "${TMP_DEPS}" || true
          done
          # Deduplica e copia
          if [ -s "${TMP_DEPS}" ]; then
            sort -u "${TMP_DEPS}" | while IFS= read -r dll; do
              [ -f "$dll" ] && cp -n "$dll" bundle/ || true
            done
          fi
          rm -f "${TMP_DEPS}"

          # DLLs comuns do runtime MinGW (backup, caso alguma falte)
          for dll in \
            libwinpthread-1.dll libstdc++-6.dll libgcc_s_seh-1.dll \
            libglib-2.0-0.dll libgobject-2.0-0.dll libgmodule-2.0-0.dll libgthread-2.0-0.dll \
            libintl-8.dll libiconv-2.dll libpcre2-8-0.dll libpixman-1-0.dll \
            libgcrypt-20.dll zlib1.dll \
          ; do
            [ -f "/mingw64/bin/$dll" ] && cp -n "/mingw64/bin/$dll" bundle/ || true
          done

          echo "Conteúdo final de bundle/:"
          ls -al bundle || true

      - name: Gerar ZIP
        if: ${{ success() }}
        shell: pwsh
        run: |
          if (Test-Path "${{ env.ZIP_NAME }}") { Remove-Item "${{ env.ZIP_NAME }}" }
          Compress-Archive -Path bundle\* -DestinationPath "${{ env.ZIP_NAME }}"

      - name: Upload artifact (CI)
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
          if-no-files-found: error

      - name: Criar Release com tag
        if: ${{ success() }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: qemu-simulide ${{ inputs.version }}
          body: ${{ inputs.notes }}
          prerelease: ${{ inputs.prerelease }}
          target_commitish: ${{ github.sha }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ======== LOG RICO EM CASO DE FALHA (não altera build, só imprime melhor) ========
      - name: Mostrar logs em caso de falha (ninja/meson)
        if: ${{ failure() }}
        shell: msys2 {0}
        run: |
          set -euo pipefail
          echo "===== ÚLTIMAS 300 linhas de _ci_stderr.log ====="
          { test -f build/_ci_logs/_ci_stderr.log && tail -n 300 build/_ci_logs/_ci_stderr.log || echo "sem _ci_stderr.log"; }
          echo
          echo "===== ÚLTIMAS 200 linhas de _ci_stdout.log ====="
          { test -f build/_ci_logs/_ci_stdout.log && tail -n 200 build/_ci_logs/_ci_stdout.log || echo "sem _ci_stdout.log"; }
          echo
          echo "===== grep 'error:' no stderr (últimas 120) ====="
          { test -f build/_ci_logs/_ci_stderr.log && grep -inE "error:|fatal error:" build/_ci_logs/_ci_stderr.log | tail -n 120 || true; }
          echo
          echo "===== grep 'FAILED:' no meson-log (últimas 40) ====="
          { test -f build/meson-logs/meson-log.txt && grep -n "FAILED:" build/meson-logs/meson-log.txt | tail -n 40 || echo "sem meson-log.txt"; }
          echo
          echo "===== TAIL do meson-log.txt (400 linhas) ====="
          { test -f build/meson-logs/meson-log.txt && tail -n 400 build/meson-logs/meson-log.txt || true; }

      - name: Upload logs (sempre)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_id }}
          path: |
            build/_ci_logs/_ci_stdout.log
            build/_ci_logs/_ci_stderr.log
            build/_ci_logs/_ci_rc.txt
            build/meson-logs/meson-log.txt
            config.log
          if-no-files-found: warn
